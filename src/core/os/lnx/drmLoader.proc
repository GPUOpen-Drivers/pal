# The proc list which is supposed to be hooked by the loader.
# LibraryName       type    returnType            functionName       ParameterList
# Please note:
#   1- Always stick * to the type but not variable.
#   2- Multiple line for each item is not supported.
#   3- Don't forget to add the library enum to dri3Loader.py in case a new library is required.
#   4- Always add a space between the function name and the "("
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_hw_ip_info (amdgpu_device_handle hDevice, uint32 type, uint32 ipInstance, struct drm_amdgpu_info_hw_ip* pInfo)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_va_op (amdgpu_bo_handle hBuffer, uint64 offset, uint64 size, uint64 address, uint64 flags, uint32 ops)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_va_op_raw (amdgpu_device_handle hDevice, amdgpu_bo_handle hBuffer, uint64 offset, uint64 size, uint64 address, uint64 flags, uint32 ops)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_create_semaphore (amdgpu_semaphore_handle* pSemaphore)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_signal_semaphore (amdgpu_context_handle hContext, uint32 ipType, uint32 ipInstance, uint32 ring, amdgpu_semaphore_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_wait_semaphore (amdgpu_context_handle hConext, uint32 ipType, uint32 ipInstance, uint32 ring, amdgpu_semaphore_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_destroy_semaphore (amdgpu_semaphore_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_create_sem (amdgpu_device_handle hDevice, amdgpu_sem_handle* pSemaphore)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_signal_sem (amdgpu_device_handle hDevice, amdgpu_context_handle hContext, uint32 ipType, uint32 ipInstance, uint32 ring, amdgpu_sem_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_wait_sem (amdgpu_device_handle hDevice, amdgpu_context_handle hContext, uint32 ipType, uint32 ipInstance, uint32 ring, amdgpu_sem_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_export_sem (amdgpu_device_handle hDevice, amdgpu_sem_handle hSemaphore, int32* pSharedFd)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_import_sem (amdgpu_device_handle hDevice, int32 fd, amdgpu_sem_handle* pSemaphore)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_destroy_sem (amdgpu_device_handle hDevice, amdgpu_sem_handle hSemaphore)
libdrm_amdgpu.so.1 @proc  const char* amdgpu_get_marketing_name (amdgpu_device_handle hDevice)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_va_range_free (amdgpu_va_handle hVaRange)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_va_range_query (amdgpu_device_handle hDevice, enum amdgpu_gpu_va_range type, uint64* pStart, uint64* pEnd)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_va_range_alloc (amdgpu_device_handle hDevice, enum amdgpu_gpu_va_range vaRangeType, uint64 size, uint64 vaBaseAlignment, uint64 vaBaseRequired, uint64* pVaAllocated, amdgpu_va_handle* pVaRange, uint64 flags)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_read_mm_registers (amdgpu_device_handle hDevice, uint32 dwordOffset, uint32 count, uint32 instance, uint32 flags, uint32* pValues)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_device_initialize (int fd, uint32* pMajorVersion, uint32* pMinorVersion, amdgpu_device_handle* pDeviceHandle)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_device_deinitialize (amdgpu_device_handle hDevice)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_alloc (amdgpu_device_handle hDevice, struct amdgpu_bo_alloc_request* pAllocBuffer, amdgpu_bo_handle* pBufferHandle)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_set_metadata (amdgpu_bo_handle hBuffer, struct amdgpu_bo_metadata* pInfo)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_query_info (amdgpu_bo_handle hBuffer, struct amdgpu_bo_info* pInfo)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_export (amdgpu_bo_handle hBuffer, enum amdgpu_bo_handle_type type, uint32* pFd)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_import (amdgpu_device_handle hDevice, enum amdgpu_bo_handle_type type, uint32 fd, struct amdgpu_bo_import_result* pOutput)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_create_bo_from_user_mem (amdgpu_device_handle hDevice, void* pCpuAddress, uint64 size, amdgpu_bo_handle* pBufferHandle)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_create_bo_from_phys_mem (amdgpu_device_handle hDevice, uint64 physAddress, uint64 size, amdgpu_bo_handle* pBufferHandle)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_find_bo_by_cpu_mapping (amdgpu_device_handle hDevice, void* pCpuAddress, uint64 size, amdgpu_bo_handle* pBufferHandle, uint64* pOffsetInBuffer)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_free (amdgpu_bo_handle hBuffer)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_cpu_map (amdgpu_bo_handle hBuffer, void** ppCpuAddress)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_cpu_unmap (amdgpu_bo_handle hBuffer)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_wait_for_idle (amdgpu_bo_handle hBuffer, uint64 timeoutInNs, bool* pBufferBusy)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_list_create (amdgpu_device_handle hDevice, uint32 numberOfResources, amdgpu_bo_handle* pResources, uint8* pResourcePriorities, amdgpu_bo_list_handle* pBoListHandle)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_list_destroy (amdgpu_bo_list_handle hBoList)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_ctx_create (amdgpu_device_handle hDevice, amdgpu_context_handle* pContextHandle)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_ctx_free (amdgpu_context_handle hContext)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_submit (amdgpu_context_handle hContext, uint64 flags, struct amdgpu_cs_request* pIbsRequest, uint32 numberOfRequests)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_query_fence_status (struct amdgpu_cs_fence* pFence, uint64 timeoutInNs, uint64 flags, uint32* pExpired)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_wait_fences (struct amdgpu_cs_fence* pFences, uint32 fenceCount, bool waitAll, uint64 timeoutInNs, uint32* pStatus, uint32* pFirst)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_buffer_size_alignment (amdgpu_device_handle hDevice, struct amdgpu_buffer_size_alignments* pInfo)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_firmware_version (amdgpu_device_handle hDevice, uint32 fwType, uint32 ipInstance, uint32 index, uint32* pVersion, uint32* pFeature)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_hw_ip_count (amdgpu_device_handle hDevice, uint32 type, uint32* pCount)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_heap_info (amdgpu_device_handle hDevice, uint32 heap, uint32 flags, struct amdgpu_heap_info* pInfo)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_gpu_info (amdgpu_device_handle hDevice, struct amdgpu_gpu_info* pInfo)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_sensor_info (amdgpu_device_handle hDevice, uint32 sensor_type, uint32 size, void* value);
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_info (amdgpu_device_handle hDevice, uint32 infoId, uint32 size, void* pValue)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_private_aperture (amdgpu_device_handle hDevice, uint64* pStartVa, uint64* pEndVa)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_query_shared_aperture (amdgpu_device_handle hDevice, uint64* pStartVa, uint64* pEndVa)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_bo_get_phys_address (amdgpu_bo_handle hBuffer, uint64* pPhysAddress)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_reserved_vmid (amdgpu_device_handle hDevice)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_unreserved_vmid (amdgpu_device_handle hDevice)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_create_syncobj (amdgpu_device_handle hDevice, uint32* pSyncObj)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_create_syncobj2 (amdgpu_device_handle hDevice, uint32 flags, uint32* pSyncObj)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_destroy_syncobj (amdgpu_device_handle hDevice, uint32 syncObj)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_export_syncobj (amdgpu_device_handle hDevice, uint32 syncObj, int32* pSharedFd)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_import_syncobj (amdgpu_device_handle hDevice, int32 sharedFd, uint32* pSyncObj)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_submit_raw (amdgpu_device_handle hDevice, amdgpu_context_handle hContext, amdgpu_bo_list_handle hBuffer, int32 numChunks, struct drm_amdgpu_cs_chunk* pChunks, uint64* pSeqNo)
libdrm_amdgpu.so.1 @proc  void amdgpu_cs_chunk_fence_to_dep (struct amdgpu_cs_fence* pFence, struct drm_amdgpu_cs_chunk_dep pDep)
libdrm_amdgpu.so.1 @proc  void amdgpu_cs_chunk_fence_info_to_data (struct amdgpu_cs_fence_info fenceInfo, struct drm_amdgpu_cs_chunk_data* pData)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_syncobj_import_sync_file (amdgpu_device_handle hDevice, uint32 syncObj, int32 syncFileFd)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_syncobj_export_sync_file (amdgpu_device_handle hDevice, uint32 syncObj, int32* pSyncFileFd)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_syncobj_wait (amdgpu_device_handle hDevice, uint32* pHandles, uint32 numHandles, int64 timeoutInNs, uint32 flags, uint32* pFirstSignaled)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_syncobj_reset (amdgpu_device_handle hDevice, const uint32* pHandles, uint32 numHandles)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_syncobj_signal (amdgpu_device_handle hDevice, const uint32* pHandles, uint32 numHandles)
libdrm_amdgpu.so.1 @proc  int32 amdgpu_cs_ctx_create2 (amdgpu_device_handle hDevice, uint32 priority, amdgpu_context_handle* pContextHandle);
libdrm.so.2        @proc  int32 drmGetNodeTypeFromFd (int fd)
libdrm.so.2        @proc  char* drmGetRenderDeviceNameFromFd (int fd)
libdrm.so.2        @proc  int32 drmGetDevices (drmDevicePtr* pDevices, int32 maxDevices)
libdrm.so.2        @proc  void drmFreeDevices (drmDevicePtr* pDevices, int32 count)
libdrm.so.2        @proc  char* drmGetBusid (int fd)
libdrm.so.2        @proc  void  drmFreeBusid (const char* pBusId)
libdrm.so.2        @proc  drmModeResPtr drmModeGetResources (int fd)
libdrm.so.2        @proc  void drmModeFreeResources (drmModeResPtr ptr)
libdrm.so.2        @proc  drmModeConnectorPtr drmModeGetConnector (int fd, uint32 connectorId)
libdrm.so.2        @proc  void drmModeFreeConnector (drmModeConnectorPtr ptr)
libdrm.so.2        @proc  int32 drmGetCap (int fd, uint64 capability, uint64* pValue)
libdrm.so.2        @proc  int32 drmSyncobjCreate (int fd, uint32 flags, uint32* pHandle)
libdrm.so.2        @proc  void drmModeFreePlane (drmModePlanePtr pPlanePtr)
libdrm.so.2        @proc  void drmModeFreePlaneResources (drmModePlaneResPtr pPlaneResPtr)
libdrm.so.2        @proc  drmModePlaneResPtr drmModeGetPlaneResources (int32 fd)
libdrm.so.2        @proc  drmModePlanePtr drmModeGetPlane (int32 fd, uint32 planeId)
libdrm.so.2        @proc  int32 drmDropMaster (int32 fd)
libdrm.so.2        @proc  int32 drmPrimeFDToHandle (int32 fd, int32 primeFd, uint32* pHandle)
libdrm.so.2        @proc  int32 drmModeAddFB2 (int32 fd, uint32 width, uint32 height, uint32 pixelFormat, uint32 boHandles[4], uint32 pitches[4], uint32 offsets[4], uint32* pBufId, uint32 flags)
libdrm.so.2        @proc  int32 drmModePageFlip (int32 fd, uint32 crtcId, uint32 fbId, uint32 flags, void* pUserData)
libdrm.so.2        @proc  drmModeEncoderPtr drmModeGetEncoder (int32 fd, uint32 encoderId)
libdrm.so.2        @proc  void drmModeFreeEncoder (drmModeEncoderPtr pEncoder)
libdrm.so.2        @proc  int drmModeSetCrtc (int32 fd, uint32 crtcId, uint32 bufferId, uint32 x, uint32 y, uint32* pConnectors, int32 count, drmModeModeInfoPtr pMode)
libdrm.so.2        @proc  drmModeConnectorPtr drmModeGetConnectorCurrent (int32 fd, uint32 connectorId)
libdrm.so.2        @proc  drmModeCrtcPtr drmModeGetCrtc (int32 fd, uint32 crtcId)
libdrm.so.2        @proc  void drmModeFreeCrtc (drmModeCrtcPtr pCrtc)
libdrm.so.2        @proc  int32 drmCrtcGetSequence (int32 fd, uint32 crtcId, uint64* pSequence, uint64* pNs)
libdrm.so.2        @proc  int32 drmCrtcQueueSequence (int32 fd, uint32 crtcId, uint32 flags, uint64 sequence, uint64* pSequenceQueued, uint64 userData)
libdrm.so.2        @proc  int32 drmHandleEvent (int32 fd, drmEventContextPtr pEvctx)
libdrm.so.2        @proc  int32 drmIoctl (int32 fd, uint32 request, void* pArg)
libdrm.so.2        @proc  drmModePropertyPtr drmModeGetProperty (int32 fd, uint32 propertyId)
libdrm.so.2        @proc  void drmModeFreeProperty (drmModePropertyPtr pProperty)
