# the proc list that supposed to be hooked by the loader.
# LibraryName       type    returnType            functionName       ParameterList
# Please note:
#   1- Always stick * to the type but not variable.
#   2- Multiple line for each item is not supported.
#   3- Don't forget to add the library enum to dri3Loader.py in case a new library is required.
libxcb-dri3.so.0    @proc xcb_dri3_open_cookie_t xcb_dri3_open  (xcb_connection_t* pConnection, xcb_drawable_t drawable, uint32 provider)
libxcb-dri3.so.0    @proc xcb_dri3_open_reply_t* xcb_dri3_open_reply (xcb_connection_t* pConnection, xcb_dri3_open_cookie_t cookie, xcb_generic_error_t** ppError)
libxcb-dri3.so.0    @proc int32* xcb_dri3_open_reply_fds   (xcb_connection_t* pConnection, xcb_dri3_open_reply_t* pReply)
libxcb-dri3.so.0    @proc xcb_void_cookie_t xcb_dri3_fence_from_fd_checked (xcb_connection_t* pConnection, xcb_drawable_t drawable, uint32 fence, uint8 initiallyTriggered, int32 fenceFd)
libxcb-dri3.so.0    @proc xcb_void_cookie_t xcb_dri3_pixmap_from_buffer_checked (xcb_connection_t* pConnection, xcb_pixmap_t pixmap, xcb_drawable_t drawable, uint32 size, uint16 width, uint16 height, uint16 stride, uint8 depth, uint8 bpp, int32 pixmapFd)
libxcb-dri3.so.0    @proc xcb_dri3_query_version_cookie_t xcb_dri3_query_version (xcb_connection_t* pConnection, uint32 majorVersion, uint32 minorVersion)
libxcb-dri3.so.0    @proc xcb_dri3_query_version_reply_t* xcb_dri3_query_version_reply (xcb_connection_t* pConnection, xcb_dri3_query_version_cookie_t cookie, xcb_generic_error_t** ppError)
libxcb-dri3.so.0    @var xcb_extension_t xcb_dri3_id
libxcb-present.so.0 @var xcb_extension_t xcb_present_id
libxcb-present.so.0 @proc xcb_present_query_version_cookie_t xcb_present_query_version (xcb_connection_t* pConnection, uint32 majorVersion, uint32 minorVersion)
libxcb-present.so.0 @proc xcb_present_query_version_reply_t* xcb_present_query_version_reply (xcb_connection_t* pConnection, xcb_present_query_version_cookie_t cookie, xcb_generic_error_t** ppError)
libxcb-present.so.0 @proc xcb_void_cookie_t xcb_present_select_input_checked (xcb_connection_t* pConnection, xcb_present_event_t eventId, xcb_window_t window, uint32 eventMask)
libxcb-present.so.0 @proc xcb_void_cookie_t xcb_present_pixmap_checked (xcb_connection_t* pConnection, xcb_window_t window, xcb_pixmap_t pixmap, uint32 serial, xcb_xfixes_region_t valid, xcb_xfixes_region_t update, int16 xOff, int16 yO_off, xcb_randr_crtc_t targetCrtc, xcb_sync_fence_t waitFence, xcb_sync_fence_t idleFence, uint32 options, uint64 targetMsc, uint64 divisor, uint64 remainder, uint32 notifiesLen, const xcb_present_notify_t* pNotifies)
libxcb-sync.so.1    @proc xcb_void_cookie_t xcb_sync_trigger_fence_checked (xcb_connection_t* pConnection, xcb_sync_fence_t fence)
libxcb-sync.so.1    @proc xcb_void_cookie_t xcb_sync_destroy_fence_checked (xcb_connection_t* pConnection, xcb_sync_fence_t fence)
libxcb.so.1         @proc uint32 xcb_generate_id (xcb_connection_t* pConnection)
libxcb.so.1         @proc xcb_special_event_t*  xcb_register_for_special_xge (xcb_connection_t* pConnection, xcb_extension_t* pExtensions, uint32 eventId, uint32* pStamp)
libxcb.so.1         @proc void xcb_unregister_for_special_event (xcb_connection_t* pConnection, xcb_special_event_t* pEvent)
libxcb.so.1         @proc xcb_generic_event_t* xcb_wait_for_special_event (xcb_connection_t* pConnection, xcb_special_event* pEvent)
libxcb.so.1         @proc const xcb_query_extension_reply_t* xcb_get_extension_data (xcb_connection_t* pConnection, xcb_extension_t* pExtension)
libxcb.so.1         @proc void xcb_prefetch_extension_data (xcb_connection_t* pConnection, xcb_extension_t* pExtension)
libxcb.so.1         @proc xcb_generic_error_t* xcb_request_check (xcb_connection_t* pConnection, xcb_void_cookie_t cookie)
libxcb.so.1         @proc xcb_get_geometry_cookie_t xcb_get_geometry (xcb_connection_t* pConnection, xcb_drawable_t drawable)
libxcb.so.1         @proc xcb_get_geometry_reply_t* xcb_get_geometry_reply (xcb_connection_t* pConnection, xcb_get_geometry_cookie_t cookie, xcb_generic_error_t** ppError)
libxcb.so.1         @proc xcb_void_cookie_t xcb_free_pixmap_checked (xcb_connection_t* pConnection, xcb_pixmap_t pixmap)
libxcb.so.1         @proc xcb_intern_atom_reply_t* xcb_intern_atom_reply (xcb_connection_t* pConnection, xcb_intern_atom_cookie_t cookie, xcb_generic_error_t** ppError)
libxcb.so.1         @proc xcb_intern_atom_cookie_t xcb_intern_atom (xcb_connection_t* pConnection, uint8 onlyIfExists, uint16 nameLen, const char* pName)
libxcb.so.1         @proc xcb_depth_iterator_t xcb_screen_allowed_depths_iterator (const xcb_screen_t* pScreen)
libxcb.so.1         @proc void xcb_depth_next (xcb_depth_iterator_t* pDepthIter)
libxcb.so.1         @proc void xcb_visualtype_next (xcb_visualtype_iterator_t* pVisualTypeIter)
libxcb.so.1         @proc xcb_screen_iterator_t xcb_setup_roots_iterator (const xcb_setup_t* pSetup)
libxcb.so.1         @proc void xcb_screen_next (xcb_screen_iterator_t* pScreenIter);
libxcb.so.1         @proc xcb_visualtype_iterator_t xcb_depth_visuals_iterator (const xcb_depth_t* pDepth)
libxcb.so.1         @proc const xcb_setup_t* xcb_get_setup (xcb_connection_t* pConnection)
libxcb.so.1         @proc const xcb_setup_t* xcb_flush (xcb_connection_t* pConnection)
libxshmfence.so.1   @proc int32 xshmfence_unmap_shm (struct xshmfence* pFence)
libxshmfence.so.1   @proc struct xshmfence* xshmfence_map_shm (int32 fence)
libxshmfence.so.1   @proc int32 xshmfence_query (struct xshmfence* pFence)
libxshmfence.so.1   @proc int32 xshmfence_await (struct xshmfence* pFence)
libxshmfence.so.1   @proc int32 xshmfence_alloc_shm ()
libxshmfence.so.1   @proc int32 xshmfence_trigger (struct xshmfence* pFence)
libxshmfence.so.1   @proc void  xshmfence_reset (struct xshmfence* pFence)
libX11-xcb.so.1     @proc xcb_connection_t* XGetXCBConnection (Display* pDisplay)
libX11.so.6         @proc XVisualInfo* XGetVisualInfo (Display* pDisplay, uint64 visualMask, XVisualInfo* pVisualInfoList, int32* count)
libX11.so.6         @proc int32 XFree (void* pAddress)
libX11.so.6         @proc Window XRootWindow (Display* pDisplay, int screenNum)
libxcb-dri2.so.0    @proc xcb_dri2_connect_cookie_t xcb_dri2_connect (xcb_connection_t* pConnection, xcb_window_t window, uint32 driver_type)
libxcb-dri2.so.0    @proc int xcb_dri2_connect_driver_name_length (const xcb_dri2_connect_reply_t* pReplay)
libxcb-dri2.so.0    @proc char* xcb_dri2_connect_driver_name (const xcb_dri2_connect_reply_t* pReplay)
libxcb-dri2.so.0    @proc xcb_dri2_connect_reply_t* xcb_dri2_connect_reply (xcb_connection_t* pConnection, xcb_dri2_connect_cookie_t cookie, xcb_generic_error_t** ppError)
libxcb-dri2.so.0    @var xcb_extension_t xcb_dri2_id
#if XCB_RANDR_SUPPORTS_LEASE
libxcb-randr.so.0   @proc xcb_randr_create_lease_cookie_t xcb_randr_create_lease (xcb_connection_t* pConnection, xcb_window_t window, xcb_randr_lease_t leaseId, uint16_t numCrtcs, uint16_t numOutputs, const xcb_randr_crtc_t* pCrtcs, const xcb_randr_output_t* pOutputs);
libxcb-randr.so.0   @proc xcb_randr_create_lease_reply_t* xcb_randr_create_lease_reply (xcb_connection_t* pConnection, xcb_randr_create_lease_cookie_t cookie, xcb_generic_error_t** ppError)
libxcb-randr.so.0   @proc int* xcb_randr_create_lease_reply_fds (xcb_connection_t * pConnection, xcb_randr_create_lease_reply_t* pReply)
#endif
libxcb-randr.so.0   @proc xcb_randr_get_screen_resources_cookie_t xcb_randr_get_screen_resources (xcb_connection_t* pConnection, xcb_window_t window)
libxcb-randr.so.0   @proc xcb_randr_get_screen_resources_reply_t* xcb_randr_get_screen_resources_reply (xcb_connection_t* pConnection, xcb_randr_get_screen_resources_cookie_t cookie, xcb_generic_error_t** ppError)
libxcb-randr.so.0   @proc xcb_randr_output_t* xcb_randr_get_screen_resources_outputs (const xcb_randr_get_screen_resources_reply_t* pScrResReply)
libxcb-randr.so.0   @proc xcb_randr_get_output_info_cookie_t xcb_randr_get_output_info (xcb_connection_t* pConnection, xcb_randr_output_t output, xcb_timestamp_t configTimestamp)
libxcb-randr.so.0   @proc xcb_randr_get_output_info_reply_t* xcb_randr_get_output_info_reply (xcb_connection_t* pConnection, xcb_randr_get_output_info_cookie_t cookie, xcb_generic_error_t ** ppError)
libxcb-randr.so.0   @proc xcb_randr_get_output_property_cookie_t xcb_randr_get_output_property (xcb_connection_t* pConnection, xcb_randr_output_t output, xcb_atom_t property, xcb_atom_t type, uint32_t offset, uint32_t length, uint8_t _delete, uint8_t pending)
libxcb-randr.so.0   @proc uint8_t* xcb_randr_get_output_property_data (const xcb_randr_get_output_property_reply_t* pReply)
libxcb-randr.so.0   @proc xcb_randr_get_output_property_reply_t * xcb_randr_get_output_property_reply (xcb_connection_t* pConnection, xcb_randr_get_output_property_cookie_t cookie, xcb_generic_error_t** ppError)
libxcb-randr.so.0   @proc xcb_randr_get_providers_cookie_t xcb_randr_get_providers (xcb_connection_t* c, xcb_window_t window)
libxcb-randr.so.0   @proc xcb_randr_get_providers_reply_t* xcb_randr_get_providers_reply (xcb_connection_t* c, xcb_randr_get_providers_cookie_t cookie, xcb_generic_error_t** e)
libxcb-randr.so.0   @proc xcb_randr_provider_t* xcb_randr_get_providers_providers (const xcb_randr_get_providers_reply_t* R)
libxcb-randr.so.0   @proc int xcb_randr_get_providers_providers_length (const xcb_randr_get_providers_reply_t* R)
libxcb-randr.so.0   @proc xcb_randr_get_provider_info_cookie_t xcb_randr_get_provider_info (xcb_connection_t* c, xcb_randr_provider_t provider, xcb_timestamp_t config_timestamp)
libxcb-randr.so.0   @proc xcb_randr_get_provider_info_reply_t* xcb_randr_get_provider_info_reply (xcb_connection_t* c, xcb_randr_get_provider_info_cookie_t cookie, xcb_generic_error_t** e)
libxcb-randr.so.0   @proc char* xcb_randr_get_provider_info_name (const xcb_randr_get_provider_info_reply_t* R)
