/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2023-2025 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 *
 **********************************************************************************************************************/

#pragma once

#include "core/hw/gfxip/indirectCmdGenerator.h"
#include "palAssert.h"
#include "palInlineFuncs.h"

namespace Pal
{
namespace Gfx12
{

class Device;

// Enumerates all of the GFX12-specific indirect operations which can be generated by an indirect command generator.
enum class IndirectOpType : uint32
{
    Skip = 0,          // Skip this indirect operation and generate no packets for it. This is used for things like
                       // index buffer bindings, which are skipped and handled as part of the DrawIndex2 operation.
                       // This is also used for padding.
    Dispatch,          // Issue a direct dispatch call.
    DrawIndexAuto,     // Issue a non-indexed draw call.
    DrawIndexOffset2,  // Issue an indexed draw call. This variation is used in cases where the indirect command
                       // generator doesn't also contain an indirect index-buffer binding. In this case, we need
                       // to inherit the already-bound index buffer.
    DrawIndex2,        // Issue an indexed draw call. This variation is used in cases where the indirect command
                       // generator also contains its own index-buffer binding. This is more performant than the
                       // other variation since it avoids unnecessary memory reads by the CP.
    SetUserData,       // Sets one or more consecutive virtualized user-data entries. These entries may end up
                       // being mapped to either physical SPI user-data registers or to the spill table.
    VertexBufTableSrd, // Builds an untyped buffer SRD in the vertex buffer table.
    DispatchMesh,      // Issue a dispatch mesh call.
    SetIncConst,       // Set a single user-data entry to update the value of incrementing constant
};

// Contains all information the indirect command generation shader(s) need to generate a command buffer snippet for
// a single command parameter.
struct IndirectParamData
{
    // Type of the command operation.
    IndirectOpType type;
    // Offsets into the argument buffer relative to the owning command's offsets.
    uint32         argBufOffset;
    // Sizes (in bytes) of the argument buffer space used by this command parameter.
    uint32         argBufSize;
    // Miscellaneous data which varies by command parameter type. See below for details specific to each type
    // of indirect operation:
    //  DrawIndex2:
    //  [0] = Offset in the argument buffer where the index data bind information is stored
    //  SetUserData:
    //  [0] = First user-data entry to update
    //  [1] = Number of user-data entries to update
    //  IndirectTableSrd:
    //  [0] = Offset into the table where the SRD is written (in DWORDs)
    uint32         data[2];
};

// =====================================================================================================================
// GFX12 specific version of the IndirectCmdGenerator class. Responsible for knowing the layout of the command buffer
// snippets corresponding to different operations which can be done in an indirect command (e.g., draw, bind index data,
// etc.). Contains the indirect parameter data and populates the buffers used to communicate the pipeline signature and
// properties of the CmdExecuteIndirectCommands() call.
class IndirectCmdGenerator final : public Pal::IndirectCmdGenerator
{
public:
    static size_t GetSize(
        const IndirectCmdGeneratorCreateInfo& createInfo);

    const IndirectParamData* const GetIndirectParamData() const { return m_pParamData; }

    IndirectCmdGenerator(
        const Device&                         device,
        const IndirectCmdGeneratorCreateInfo& createInfo);

    uint32 ManageUserDataOp(
        const UserDataLayout*      pUserDataLayout,
        ExecuteIndirectMeta*       pMeta,
        ExecuteIndirectPacketInfo* pPacketInfo,
        const uint32               vertexBufTableDwords,
        const bool                 isGfx,
        const bool                 isTaskOnAce) const;

    void PopulateExecuteIndirectParams(
        const IPipeline*           pPipeline,
        const bool                 isGfx,
        const bool                 onAceQueue,
        ExecuteIndirectPacketInfo* pPacketInfo,
        ExecuteIndirectMeta*       pMeta,
        uint32                     vbTableDwords,
        const EiDispatchOptions&   options,
        const EiUserDataRegs&      regs) const;

    bool ContainIndexBuffer() const { return m_flags.containIndexBuffer; }

    bool ContainIncrementingConstant() const { return m_flags.containIncrementConstant; }

    bool UseConstantDrawIndex() const { return m_flags.useConstantDrawIndex; }

protected:
    virtual ~IndirectCmdGenerator() { }

private:
    void InitParamBuffer(
        const IndirectCmdGeneratorCreateInfo& createInfo);

    union
    {
        struct
        {
            uint8 containIndexBuffer        : 1; // Commands generated by this object include an index-buffer binding.
            uint8 containIncrementConstant  : 1; // Commands generated by this object include incrementing constant.
            uint8 useConstantDrawIndex      : 1; // If set, does not increment the Draw Index per draw.
            uint8 useOffsetModeVertexBuffer : 1; // If set, indirect vertex binding is in offset mode.
            uint8 reserved                  : 4;
        };
        uint8 u8All;
    } m_flags;

    // Array of IndirectParamData structures.
    IndirectParamData*const m_pParamData;

    IndirectParam*const     m_pCreationParam;

    PAL_DISALLOW_DEFAULT_CTOR(IndirectCmdGenerator);
    PAL_DISALLOW_COPY_AND_ASSIGN(IndirectCmdGenerator);
};

} // Gfx12
} // Pal
