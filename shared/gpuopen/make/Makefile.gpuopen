## Copyright (c) 2021 Advanced Micro Devices, Inc. All rights reserved. ##
DEVDRIVER_DEPTH = $(GPUOPEN_DEPTH)

# Propagate the AMD branch definition string from the higher level makefiles
ifneq ($(AMD_BRDEFS_BRANCH_STRING),)
    LCXXDEFS += -DDD_BRANCH_STRING=\"$(AMD_BRDEFS_BRANCH_STRING)\"
else
    LCXXDEFS += -DDD_BRANCH_STRING=\"unknown\"
endif

# WA: Support both of these flags until we fully remove GPUOPEN_UWP_SUPPORT.
# GPUOPEN_UWP_SUPPORT was renamed in July 2020. Clients that use this should rename their flag.
# Until they do, we offer this back-compat layer.
ifneq ($(GPUOPEN_UWP_SUPPORT),)
    DD_BP_ENABLE_UWP_TRANSPORT = $(GPUOPEN_UWP_SUPPORT)
endif

LCXXDEFS += -DRMT_DATA_MAJOR_VERSION=1

ifeq ($(PLATFORM_FLAVOR), win)
    LCXXDEFS += -DDD_PLATFORM_WINDOWS_UM=1 -DDD_PLATFORM_IS_UM=1
    LCXXDEFS += -DDD_PLATFORM_STRING=\"Windows_User_Mode\"
else
    LCXXDEFS += -DDD_PLATFORM_LINUX_UM=1 -DDD_PLATFORM_IS_UM=1 -DDD_PLATFORM_IS_GNU=1 -DDD_PLATFORM_IS_POSIX=1
    LCXXDEFS += -DDD_PLATFORM_STRING=\"Linux_User_Mode\"
endif

ifeq ($(BUILD_TYPE),dbg)
    LCXXDEFS += -DDD_OPT_SHOW_DEBUG_LABELS
endif

ifneq ($(DD_OPT_LOG_LEVEL),)
    LCXXDEFS += -DDD_OPT_LOG_LEVEL=$(DD_OPT_LOG_LEVEL)
endif

LCXXINCS += -I$(DEVDRIVER_DEPTH)/inc                           \
            -I$(DEVDRIVER_DEPTH)/src                           \
            -I$(DEVDRIVER_DEPTH)/third_party/rapidjson/include \
            -I$(DEVDRIVER_DEPTH)/third_party/mpack

## ddCore
vpath %.cpp $(DEVDRIVER_DEPTH)/core/src
CPPFILES += ddcPlatform.cpp \
            ddcMemory.cpp

## Core Components
# Server, Protocol, and Platform support
vpath %.cpp $(DEVDRIVER_DEPTH)/src
CPPFILES += ddVersion.cpp             \
            session.cpp               \
            sessionManager.cpp        \
            messageChannel.cpp        \
            baseProtocolServer.cpp    \
            legacyProtocolClient.cpp  \
            ddTransferManager.cpp     \
            ddClientURIService.cpp    \
            ddURIRequestContext.cpp

# Drivers always get devdriverServer objects
CPPFILES += devDriverServer.cpp

# Build support for protocols
vpath %.cpp $(DEVDRIVER_DEPTH)/src/protocols
CPPFILES += ddTransferServer.cpp      \
            ddTransferClient.cpp      \
            ddURIServer.cpp           \
            ddEventServer.cpp         \
            ddEventProvider.cpp       \
            ddEventServerSession.cpp  \
            ddInternalService.cpp     \
            ddSettingsService.cpp     \
            ddInfoService.cpp         \
            ddPipelineUriService.cpp  \
            driverControlServer.cpp   \
            rgpServer.cpp             \
            etwClient.cpp

# Utility Classes
vpath %.cpp $(DEVDRIVER_DEPTH)/src/util
CPPFILES += ddTextWriter.cpp          \
            ddStructuredReader.cpp    \
            ddJsonWriter.cpp          \
            rmtWriter.cpp             \
            ddEventTimer.cpp

ifeq ($(COMPILE_TYPE),32)
    LCXXDEFS += -DAMD_TARGET_ARCH_BITS=32
endif

ifeq ($(COMPILE_TYPE),64a)
    LCXXDEFS += -DAMD_TARGET_ARCH_BITS=64
endif

ifeq ($(PLATFORM_FLAVOR), win)

    vpath %.cpp $(DEVDRIVER_DEPTH)/core/src/platforms
    CPPFILES += ddcWinPlatform.cpp

    vpath %.cpp $(DEVDRIVER_DEPTH)/src/win
    CPPFILES += ddWinPipeMsgTransport.cpp  \
                ddLocalNgMsgTransport.cpp  \
                ddDevModeControlDevice.cpp \
                ddWinKmIoCtlDevice.cpp     \
                ddWinUmIoCtlDevice.cpp     \
                ddDevModeQueue.cpp

    ifneq ($(DD_BP_ENABLE_UWP_TRANSPORT),)
        # WA: Support both of these flags until we fully remove GPUOPEN_UWP_SUPPORT
        LCXXDEFS += -DGPUOPEN_UWP_SUPPORT=1
        # Note: Code does not use the DD_BP prefix
        LCXXDEFS += -DDD_ENABLE_UWP_TRANSPORT=1
        LCXXINCS += -I$(DEVDRIVER_DEPTH)/message/inc  \
                    -I$(DEVDRIVER_DEPTH)/message/src

        ifeq ($(GPUOPEN_USE_MESSAGE_LIB),)
            # Build local message support as well
            LCXXINCS += -I$(DEPTH)/drivers/inc/shared/   \
                        -I$(DEPTH)/drivers/pxproxy/inc/

            vpath %.cpp $(DEVDRIVER_DEPTH)/message/src
            CPPFILES += kmdEscapeProxy.cpp      \
                        escape.cpp              \
                        message.cpp             \
                        localMsgTransport.cpp

            ifeq ($(BUILD_TYPE),dbg)
                LCXXDEFS += -DDEVDRIVER_FAKEIOCTL
                CPPFILES += umEscapeProxy.cpp
            endif
        endif
    endif

else

    vpath %.cpp $(DEVDRIVER_DEPTH)/core/src/platforms
    CPPFILES += ddcPosixPlatform.cpp

    vpath %.cpp $(DEVDRIVER_DEPTH)/src/posix
    CPPFILES += socketMsgTransport.cpp \
                ddPosixSocket.cpp

endif

# Build a local copy of MetroHash if it hasn't already been built
ifndef METROHASH_DEPTH
    METROHASH_DEPTH = $(DEVDRIVER_DEPTH)/third_party/metrohash
    include $(METROHASH_DEPTH)/make/Makefile.metrohash
endif

# Build a local copy of MPack if it hasn't already been built
ifndef MPACK_DEPTH
    MPACK_DEPTH = $(DEVDRIVER_DEPTH)/third_party/mpack
    include $(MPACK_DEPTH)/Makefile.mpack
endif

# Build a local copy of tiny_printf if it hasn't already been built
ifndef TINY_PRINTF_DEPTH
    TINY_PRINTF_DEPTH = $(DEVDRIVER_DEPTH)/third_party/tiny_printf
    include $(TINY_PRINTF_DEPTH)/Makefile.tiny_printf
endif
