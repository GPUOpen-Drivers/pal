/* Copyright (c) 2022 Advanced Micro Devices, Inc. All rights reserved. */

// ============================================================================
// WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!
//
// This code was auto-generated by settings_codegen.py. Do not modify manually.
// ============================================================================

#pragma once

#include <settingsBase.h>

{% macro prep_cond_begin(conds) %}
{% if conds %}
#if {{ conds|macros_concat }}
{% endif %}
{% endmacro %}

{% macro prep_cond_end(conds) %}
{% if conds %}
#endif
{% endif %}
{% endmacro %}

namespace {{ComponentName}}
{
/// Enums /////////////////////////////////////////////////////////////////////
{% for enum in Enums %}
enum {{enum.Name}} : uint8_t
{
{% for variant in enum.Variants %}
{{ prep_cond_begin(variant.PreprocessorConditions) -}}
{{'    '}}{{variant.Name}} = {{variant.Value}}, {% if variant.Description %}// {{variant.Description}}{% endif +%}
{{ prep_cond_end(variant.PreprocessorConditions) -}}
{% endfor %}
};

{% endfor %}

/// Bitmasks ///////////////////////////////////////////////////////////////////
{% for bitmask in Bitmasks %}
enum {{bitmask.Name}} : uint32_t
{
{% for bit in bitmask.Bits %}
{{ prep_cond_begin(bit.PreprocessorConditions) -}}
{{'    '}}{{bit.Name}} = {{bit.Value}}, {%if bit.Description%}// {{bit.Description}}{% endif +%}
{{ prep_cond_end(bit.PreprocessorConditions) -}}
{% endfor %}
};

{% endfor %}

struct {{ComponentName}}SettingsData : public DevDriver::SettingsData
{
{% for setting in Settings %}
{% if setting.GroupName %}

    struct {
{% for subs in setting.Subsettings %}
{{ prep_cond_begin(subs.PreprocessorConditions) -}}
{{'        '}}{{subs.VariableType}} {{subs.VariableName}}{% if subs.StringLength %}[{{subs.StringLength}}]{% endif %};
{{ prep_cond_end(subs.PreprocessorConditions) -}}
{% endfor %}
    } {{setting.GroupVariableName}};
{% else %}
{{ prep_cond_begin(setting.PreprocessorConditions) -}}
{{'    '}}{{setting.VariableType}} {{setting.VariableName}}{% if setting.StringLength %}[{{setting.StringLength}}]{% endif %};
{{ prep_cond_end(setting.PreprocessorConditions) -}}
{% endif %}
{% endfor %}
};

const uint32_t g_{{ComponentNameLower}}NumSettings = {{NumSettings}};

} // namespace Pal
