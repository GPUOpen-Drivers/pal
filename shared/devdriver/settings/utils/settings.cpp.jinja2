/* Copyright (c) 2022 Advanced Micro Devices, Inc. All rights reserved. */

// ============================================================================
// WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!
//
// This code was auto-generated by settings_codegen.py. Do not modify manually.
// ============================================================================

#include "{{CodeGenHeader}}"
#include "{{SettingsHeader}}"

#include <devDriverServer.h>
#include <protocols/ddSettingsService.h>
{% if UseRpc %}
#include <settingsService.h>
{% endif %}
#include <settingsTypes.h>

using namespace DevDriver::SettingsURIService;

{% macro prep_cond_begin(conds) %}
{% if conds %}
#if {{ conds|macros_concat }}
{% endif %}
{% endmacro %}
{# ======================================== #}
{% macro prep_cond_end(conds) %}
{% if conds %}
#endif
{% endif %}
{% endmacro %}

namespace {{ComponentName}}
{

// ============================================================================
// Setting name strings.
{% for setting in Settings %}
{% if setting.GroupName %}
{% for subs in setting.Subsettings %}
{{ prep_cond_begin(subs.PreprocessorConditions) -}}
const char* p{{setting.GroupName}}_{{subs.Name}} = "{{setting.GroupName}}_{{subs.Name}}";
{{ prep_cond_end(subs.PreprocessorConditions) -}}
{% endfor %}
{% else %}
{{ prep_cond_begin(setting.PreprocessorConditions) -}}
const char* p{{setting.Name}} = "{{setting.Name}}";
{{ prep_cond_end(setting.PreprocessorConditions) -}}
{% endif %}
{% endfor %}

// ============================================================================
// Initializes the settings structure to default values.
void {{ComponentName}}Settings::SetupDefaults()
{
{% for setting in Settings %}
{% if setting.GroupName %}

{% for subs in setting.Subsettings %}
{{ prep_cond_begin(subs.PreprocessorConditions) -}}
{{ subs|setup_default(setting.GroupVariableName) -}}
{{ prep_cond_end(subs.PreprocessorConditions) -}}
{% endfor %}
{% else %}
{{ prep_cond_begin(setting.PreprocessorConditions) -}}
{{ setting|setup_default('') -}}
{{ prep_cond_end(setting.PreprocessorConditions) -}}
{% endif %}
{% endfor %}
}

// ============================================================================
// Initializes the SettingInfo hash map and array of setting hashes.
void {{ComponentName}}Settings::InitSettingsInfo()
{
    DevDriver::SettingsValueRef valueRef = {};
{% for setting in Settings %}
{% if setting.GroupName %}

{% for subs in setting.Subsettings %}
{{ prep_cond_begin(subs.PreprocessorConditions) }}
    valueRef.type = {{ subs.Defaults.Type|setting_type_cpp2 }};
    valueRef.pValue = &m_settings.{{setting.GroupVariableName}}.{{subs.VariableName}};
    valueRef.size = sizeof(m_settings.{{setting.GroupVariableName}}.{{subs.VariableName}});
    m_settingValueRefsMap.Insert({{subs.NameHash}}, valueRef);
{{ prep_cond_end(subs.PreprocessorConditions) -}}
{% endfor %}
{% else %}
{{ prep_cond_begin(setting.PreprocessorConditions) }}
    valueRef.type = {{ setting.Defaults.Type|setting_type_cpp2 }};
    valueRef.pValue = &m_settings.{{setting.VariableName}};
    valueRef.size = sizeof(m_settings.{{setting.VariableName}});
    m_settingValueRefsMap.Insert({{setting.NameHash}}, valueRef);
{{ prep_cond_end(setting.PreprocessorConditions) -}}
{% endif %}
{% endfor %}
}

// The two arrays are for backwards compatible with the existing tools.
// When the tools support Settings 2.0, these should be removed.
extern const SettingNameHash SettingsNameHashList_Legacy[];
extern const uint8_t SettingsJsonData_Legacy[];
{% if not UseRpc %}

// ============================================================================
// Registers the core settings with the Developer Driver settings service.
void {{ComponentName}}Settings::DevDriverRegister(DevDriver::DevDriverServer* pServer)
{
    if (pServer != nullptr)
    {
        SettingsService* pSettingsService = pServer->GetSettingsService();
        if (pSettingsService != nullptr)
        {
            RegisteredComponent component = {};
            strncpy(&component.componentName[0], "{{ComponentName}}", kMaxComponentNameStrLen);
            component.pPrivateData = static_cast<void*>(this);
            component.pSettingsHashes = SettingsNameHashList_Legacy;
            component.numSettings = {{NumSettings}};
            component.pfnGetValue = SettingsBase::GetValue;
            component.pfnSetValue = SettingsBase::SetValue;
            component.pSettingsData = &SettingsJsonData_Legacy[0];
            component.settingsDataSize = {{JsonDataSize_Legacy}};
            component.settingsDataHash = {{JsonDataHash_Legacy}};
            component.settingsDataHeader.isEncoded = true;
            component.settingsDataHeader.magicBufferId = {{MagicBufferId}};
            component.settingsDataHeader.magicBufferOffset = 0;

            pSettingsService->RegisterComponent(component);
        }
    }
}
{% else %}

// ============================================================================
// Registers the core settings with the Developer Driver settings service.
void {{ComponentName}}Settings::DevDriverRegister(SettingsRpcService::SettingsService* pSettingsService)
{
    if (pSettingsService != nullptr)
    {
        RegisteredComponent component = {};
        strncpy(&component.componentName[0], "{{ComponentName}}", kMaxComponentNameStrLen);
        component.pPrivateData = static_cast<void*>(this);
        component.pSettingsHashes = SettingsNameHashList_Legacy;
        component.numSettings = static_cast <DevDriver::uint32>(m_settingValueRefsMap.Size());
        component.pfnGetValue = SettingsBase::GetValue;
        component.pfnSetValue = SettingsBase::SetValue;
        component.pSettingsData = &SettingsJsonData_Legacy[0];
        component.settingsDataSize = {{JsonDataSize_Legacy}};
        component.settingsDataHash = {{JsonDataHash_Legacy}};
        component.settingsDataHeader.isEncoded = true;
        component.settingsDataHeader.magicBufferId = {{MagicBufferId}};
        component.settingsDataHeader.magicBufferOffset = 0;

        pSettingsService->RegisterComponent(component);
    }
}
{% endif %}

const SettingNameHash SettingsNameHashList_Legacy[] = {
{% for setting in Settings %}
{% if setting.GroupName %}
{% for subs in setting.Subsettings %}
{{ prep_cond_begin(subs.PreprocessorConditions) -}}
{{'    '}}{{subs.NameHash}},
{{ prep_cond_end(subs.PreprocessorConditions) -}}
{% endfor %}
{% else %}
{{ prep_cond_begin(setting.PreprocessorConditions) -}}
{{'    '}}{{setting.NameHash}},
{{ prep_cond_end(setting.PreprocessorConditions) -}}
{% endif %}
{% endfor %}
};

const uint8_t SettingsJsonData_Legacy[] = {
    {{JsonData_Legacy}}
};
static_assert({{JsonDataSize_Legacy}} == sizeof(SettingsJsonData_Legacy),
              "Settings JSON data size in C++ doesn't match the one calculated in the code-gen script.");

} // namespace Pal
