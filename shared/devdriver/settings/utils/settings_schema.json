{
  "$id": "./settings-schema.json",
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Settings Schema",
  "description": "This schema defines the structure of Settings 2.0 JSON data.",
  "type": "object",
  "properties": {
    "Version": {
      "type": "integer",
      "minimum": 1
    },
    "ComponentName": {
      "type": "string"
    },
    "DriverStates": {
      "$ref": "#/$defs/DriverStates",
      "description": "Driver states during which the settings can be overridden. Applies to all settings in this file unless overridden by an individual setting."
    },
    "Enums": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string",
            "description": "The name of the enum."
          },
          "Variants": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string",
                  "description": "The name of the variant."
                },
                "Value": {
                  "type": "integer",
                  "description": "The value of the variant. Should be unique from other variants."
                },
                "PreprocessorConditions": {
                  "$ref": "#/$defs/PreprocessorConditions"
                },
                "Description": {
                  "type": "string",
                  "description": "The description of the variant."
                }
              },
              "required": [
                "Name",
                "Value"
              ]
            },
            "description": "Different fields in an enum struct."
          },
          "Description": {
            "type": "string"
          }
        },
        "required": [
          "Name",
          "Variants",
          "Description"
        ]
      },
      "description": "All enums must be defined in this top-level list first, then referenced by name for individual settings."
    },
    "Bitmasks": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "Name": {
            "type": "string"
          },
          "Bits": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "Name": {
                  "type": "string"
                },
                "Value": {
                  "type": "integer",
                  "description": "The integer value with a bit set. Must be power of 2, and unique from other bit values."
                },
                "PreprocessorConditions": {
                  "$ref": "#/$defs/PreprocessorConditions"
                },
                "Description": {
                  "type": "string"
                }
              },
              "required": [
                "Name",
                "Value",
                "Description"
              ]
            }
          },
          "Description": {
            "type": "string"
          }
        },
        "required": [
          "Name",
          "Bits",
          "Description"
        ]
      },
      "description": "All bitfields must be defined in this top-level list first, then referenced by name for individual settings."
    },
    "Settings": {
      "type": "array",
      "items": {
        "$ref": "#/$defs/Setting"
      }
    }
  },
  "required": [
    "Version",
    "ComponentName",
    "DriverStates",
    "Settings"
  ],
  "$defs": {
    "Setting": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string",
          "description": "Name must start with an English letter as it might be used for generating VariableName. Name can have a common prefix followed by an underscore, which helps GUI tools group related settings."
        },
        "VariableName": {
          "type": "string",
          "description": "The variable name for the generate C++ code. If absent, the generated variable name is the setting name with the first letter being lowercase."
        },
        "Defaults": {
          "type": "object",
          "properties": {
            "Type": {
              "enum": [
                "bool",
                "int8",
                "uint8",
                "int16",
                "uint16",
                "int32",
                "uint32",
                "int64",
                "uint64",
                "float",
                "string"
              ],
              "description": "The type of the default value."
            },
            "Default": {
              "type": [
                "string",
                "number",
                "boolean"
              ],
              "description": "Default value for Windows and all other platforms. Can be overridden for non-Windows platforms."
            },
            "Linux": {
              "type": [
                "string",
                "number",
                "boolean"
              ],
              "description": "Default value for Linux."
            }
          },
          "required": [
            "Type",
            "Default"
          ]
        },
        "Visibility": {
          "enum": [
            "Public",
            "NDA",
            "Private"
          ],
          "description": "Used by code-gen to separate settings into different part based on who can set/modify this setting. Default to private."
        },
        "Description": {
          "type": "string"
        },
        "PreprocessorConditions": {
          "$ref": "#/$defs/PreprocessorConditions"
        },
        "DriverStates": {
          "$ref": "#/$defs/DriverStates",
          "description": "Driver states for this setting, overriding the top-level DriverStates list."
        },
        "Tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "uniqueItems": true,
          "description": "Tags help GUI tools with grouping and search."
        },
        "Flags": {
          "type": "object",
          "properties": {
            "IsHex": {
              "type": "boolean",
              "description": "Should his setting be dsiplay in Hexidecimal. Default to false."
            },
            "IsDir": {
              "type": "boolean",
              "description": "Indicate this is a path to a directory. Default to false. Used by code-gen to produce a static array with a pre-defined length."
            },
            "IsFile": {
              "type": "boolean",
              "description": "Indicate this is a path to a file. Default to false. Used by code-gen to produce a static array with a pre-defined length."
            },
            "ReadAfterOverride": {
              "type": "boolean",
              "description": "A setting can be overridden after it reads its initial user-value. This allows the setting to read its initial user-value again, letting a user decides its final value desipte override."
            }
          },
          "description": "The flags represent various attributes of this setting."
        },
        "Enum": {
          "type": "string",
          "description": "One of the names in the top-level Enums list."
        },
        "Bitmask": {
          "type": "string",
          "description": "One of the names in the top-level Bitmasks list."
        }
      },
      "required": [
        "Name",
        "Defaults",
        "Description"
      ],
      "not": {
        "required": [
          "Enum",
          "Bitmask"
        ],
        "$comment": "This contraint states that Enum and Bitmask cannot be present at the same time."
      }
    },
    "DriverStates": {
      "type": "array",
      "items": {
        "enum": [
          "HaltedOnPlatformInit",
          "HaltedOnDeviceInit",
          "HaltedPostDeviceInit",
          "Running",
          "Paused"
        ]
      },
      "uniqueItems": true,
      "description": "During which driver states this setting can be set/modified."
    },
    "PreprocessorConditions": {
      "type": "object",
      "properties": {
        "Relation": {
          "enum": [
            "AND",
            "OR"
          ],
          "description": "How to treat multiple conditions."
        },
        "Macros": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Name of predefined macros in drivers."
          },
          "uniqueItems": true
        }
      },
      "required": [
        "Macros"
      ],
      "description": "Used by code-gen to determine under what preprocessor conditions its parent field should be included. Default to always include."
    }
  }
}