/*
 ***********************************************************************************************************************
 *
 *  Copyright (c) 2024 Advanced Micro Devices, Inc. All Rights Reserved.
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in all
 *  copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  SOFTWARE.
 *
 **********************************************************************************************************************/

#include <dd_result.h>
#include <cerrno>

namespace DevDriver
{

DD_RESULT ResultFromErrno(int err)
{
    if (err < 0)
    {
        err = -err;
    }

    switch (err)
    {
        case 0:      return DD_RESULT_SUCCESS;
        case EACCES: return DD_RESULT_FS_PERMISSION_DENIED;
        case EAGAIN: return DD_RESULT_DD_GENERIC_UNAVAILABLE;
        case EEXIST: return DD_RESULT_COMMON_ALREADY_EXISTS;
        case EINVAL: return DD_RESULT_COMMON_INVALID_PARAMETER;
        case ENOENT: return DD_RESULT_COMMON_INTERFACE_NOT_FOUND;
        case EPERM:  return DD_RESULT_COMMON_ACCESS_DENIED;
        case ERANGE: return DD_RESULT_COMMON_OUT_OF_RANGE;
        default: return DD_RESULT_COMMON_UNKNOWN;
    }
}

// Utility macro to protect against copy-and-paste errors or typoes in ddApiResultToString's switch statement.
#define RESULT_TO_STRING_CASE(result) case result: return # result;

const char* StringResult(DD_RESULT r)
{
    switch (r)
    {
        RESULT_TO_STRING_CASE(DD_RESULT_UNKNOWN);

        RESULT_TO_STRING_CASE(DD_RESULT_DEBUG_UNINIT_STACK_MEMORY);
        RESULT_TO_STRING_CASE(DD_RESULT_DEBUG_UNINIT_HEAP_MEMORY);
        RESULT_TO_STRING_CASE(DD_RESULT_DEBUG_FREED_HEAP_MEMORY);

        RESULT_TO_STRING_CASE(DD_RESULT_SUCCESS);

        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_UNIMPLEMENTED);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_INVALID_PARAMETER);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_OUT_OF_HEAP_MEMORY);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_BUFFER_TOO_SMALL);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_VERSION_MISMATCH);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_INTERFACE_NOT_FOUND);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_ALREADY_EXISTS);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_DOES_NOT_EXIST);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_LIMIT_REACHED);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_UNSUPPORTED);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_SUCCESS_WITH_ERRORS);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_ACCESS_DENIED);
        RESULT_TO_STRING_CASE(DD_RESULT_COMMON_OUT_OF_RANGE);

        RESULT_TO_STRING_CASE(DD_RESULT_PARSING_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_PARSING_INVALID_BYTES);
        RESULT_TO_STRING_CASE(DD_RESULT_PARSING_INVALID_STRING);
        RESULT_TO_STRING_CASE(DD_RESULT_PARSING_INVALID_JSON);
        RESULT_TO_STRING_CASE(DD_RESULT_PARSING_INVALID_MSGPACK);
        RESULT_TO_STRING_CASE(DD_RESULT_PARSING_INVALID_STRUCTURE);
        RESULT_TO_STRING_CASE(DD_RESULT_PARSING_UNEXPECTED_EOF);

        RESULT_TO_STRING_CASE(DD_RESULT_FS_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_FS_NOT_FOUND);
        RESULT_TO_STRING_CASE(DD_RESULT_FS_PERMISSION_DENIED);
        RESULT_TO_STRING_CASE(DD_RESULT_FS_BROKEN_PIPE);
        RESULT_TO_STRING_CASE(DD_RESULT_FS_ALREADY_EXISTS);
        RESULT_TO_STRING_CASE(DD_RESULT_FS_WOULD_BLOCK);
        RESULT_TO_STRING_CASE(DD_RESULT_FS_INVALID_DATA);
        RESULT_TO_STRING_CASE(DD_RESULT_FS_TIMED_OUT);
        RESULT_TO_STRING_CASE(DD_RESULT_FS_INTERRUPTED);

        RESULT_TO_STRING_CASE(DD_RESULT_NET_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_CONNECTION_EXISTS);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_CONNECTION_REFUSED);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_CONNECTION_RESET);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_CONNECTION_ABORTED);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_NOT_CONNECTED);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_ADDR_IN_USE);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_ADDR_NOT_AVAILABLE);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_WOULD_BLOCK);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_TIMED_OUT);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_INTERRUPTED);
        RESULT_TO_STRING_CASE(DD_RESULT_NET_SOCKET_TYPE_UNSUPPORTED);

        RESULT_TO_STRING_CASE(DD_RESULT_DD_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_BUS_UNAVAILABLE);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_INVALID_DATA_CONTEXT);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_INVALID_CLIENT_CONTEXT);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_INVALID_SYSTEM_CONTEXT);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_API_FEATURE_NOT_ENABLED);

        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_NOT_READY);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_VERSION_MISMATCH);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_UNAVAILABLE);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_REJECTED);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_END_OF_STREAM);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_ABORTED);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_INSUFFICIENT_MEMORY);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_INVALID_PARAMETER);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_INVALID_CLIENT_ID);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_CONNECTION_EXITS);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_FILE_NOT_FOUND);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_FUNTION_NOT_FOUND);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_INTERFACE_NOT_FOUND);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_ENTRY_EXISTS);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_FILE_ACCESS_ERROR);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_FILE_IO_ERROR);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_GENERIC_LIMIT_REACHED);

        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_SERVICE_REGISTRATION_ERROR);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_STRING_PARSE_ERROR);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_INVALID_PARAMETERs);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_INVALID_POST_DATA_BLOCK);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_INVALID_POST_DATA_SIZE);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_FAILED_TO_ACQUIRE_POST_BLOCK);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_FAILED_TO_OPEN_RESPONSE_BLOCK);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_REQUEST_FAILED);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_PENDING_REQUEST_ERROR);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_INVALID_CHAR);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_URI_INVALID_JSON);

        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_SERVICE_NOT_REGISTERED);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_FUNC_NOT_REGISTERED);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_FUNC_PARAM_REJECTED);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_FUNC_PARAM_TOO_LARGE);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_FUNC_RESPONSE_REJECTED);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_FUNC_RESPONSE_MISSING);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_CTRL_UNEXPECTED_RESPONSE_TYPE);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_CTRL_INVALID_RESPONSE_SIZE);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_CTRL_INVALID_RESPONSE_DATA_SIZE);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_CTRL_RESPONSE_SIZE_MISMATCH);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_CTRL_CORRUPTED_PACKET);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_RPC_FUNC_UNEXPECTED_RETURN_DATA);

        RESULT_TO_STRING_CASE(DD_RESULT_DD_EVENT_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_EVENT_EMIT_PROVIDER_DISABLED);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_EVENT_EMIT_INVALID_EVENT_ID);
        RESULT_TO_STRING_CASE(DD_RESULT_DD_EVENT_EMIT_EVENT_DISABLED);

        RESULT_TO_STRING_CASE(DD_RESULT_SETTINGS_SERVICE_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_SETTINGS_SERVICE_INVALID_NAME);
        RESULT_TO_STRING_CASE(DD_RESULT_SETTINGS_SERVICE_INVALID_COMPONENT);
        RESULT_TO_STRING_CASE(DD_RESULT_SETTINGS_SERVICE_INVALID_SETTING_DATA);

        RESULT_TO_STRING_CASE(DD_RESULT_SETTINGS_UNKNOWN);
        RESULT_TO_STRING_CASE(DD_RESULT_SETTINGS_NOT_FOUND);
        RESULT_TO_STRING_CASE(DD_RESULT_SETTINGS_TYPE_MISMATCH);
    }

    return "DD_RESULT_UNKNOWN";
}
} // namespace DevDriver

