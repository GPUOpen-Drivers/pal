/* Copyright (c) 2022-2023 Advanced Micro Devices, Inc. All rights reserved. */

// =============================================================================
// WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!
//
// This code was auto-generated by settings_codegen.py. Do not modify manually.
// =============================================================================

#include "{{CodeGenHeader}}"
#include <{{SettingsHeader}}>

{% if ComponentName == "Pal" %}
#include <palDevice.h>
{% endif %}
{% if ComponentName == "Dxc" %}
#include <palFile.h>
{% endif %}

{% macro prep_cond_begin(build_types, or_build_types) %}
{% if build_types or or_build_types %}
{{build_types|buildtypes_to_c_macro(or_build_types)}}
{% endif %}
{% endmacro %}

{%- macro prep_cond_end(build_types, or_build_types) %}
{% if build_types or or_build_types %}
#endif

{% endif %}
{% endmacro %}

{% macro get_var_size(is_optional, var_name) %}
sizeof({% if is_optional %}decltype({{var_name}})::ValueType{% else %}{{var_name}}{% endif %});
{%- endmacro -%}

{% for namespace in Namespaces %}
namespace {{namespace}}
{
{% endfor %}

const char* {{ClassName}}::GetComponentName() const
{
    return "{{ComponentName}}";
}

uint64_t {{ClassName}}::GetSettingsBlobHash() const
{
    return static_cast<uint64_t>({{SettingsBlobHash|abs}}ULL);
}

// Initializes the settings hash map and array of setting hashes.
DD_RESULT {{ClassName}}::SetupDefaultsAndPopulateMap()
{
    DevDriver::Result result = DevDriver::Result::Success;

    DDSettingsValueRef valueRef = {};

{% for setting in Settings %}
{% if setting.Structure %}

{% for subs in setting.Structure %}
{{ prep_cond_begin(subs.BuildTypes, subs.OrBuildTypes) }}
    if (result == DevDriver::Result::Success)
    {
{{ subs|setup_default(setting.VariableName) }}
        valueRef.type = {{ subs.Type|setting_type_cpp }};
        {% set var_name = "m_settings." + setting.VariableName + "." + subs.VariableName %}
        valueRef.pValue = &{{var_name}};
        valueRef.size = {{ get_var_size(subs.IsOptional, var_name) }}
        valueRef.isOptional = {% if subs.IsOptional %}true{% else %}false{% endif %};
        result = m_settingsMap.Insert({{setting.VariableName}}_{{subs.VariableName}}Hash, valueRef);
    }
{{ prep_cond_end(subs.BuildTypes, subs.OrBuildTypes) -}}
{% endfor %}
{% else %}
{{ prep_cond_begin(setting.BuildTypes, setting.OrBuildTypes) }}
    if (result == DevDriver::Result::Success)
    {
{{ setting|setup_default('') }}
        valueRef.type = {{ setting.Type|setting_type_cpp }};
        {% set var_name = "m_settings." + setting.VariableName %}
        valueRef.pValue = &{{var_name}};
        valueRef.size = {{ get_var_size(setting.IsOptional, var_name) }}
        valueRef.isOptional = {% if setting.IsOptional %}true{% else %}false{% endif %};
        result = m_settingsMap.Insert({{setting.VariableName}}Hash, valueRef);
    }
{{ prep_cond_end(setting.BuildTypes, setting.OrBuildTypes) -}}
{% endif %}
{% endfor %}

    return (result == DevDriver::Result::Success) ? DD_RESULT_SUCCESS : DD_RESULT_COMMON_OUT_OF_HEAP_MEMORY;
}

{% if not IsExperiments and (IsPalSettings or IsDxSettings or ComponentName == "Vulkan" or ComponentName == "Dxx") %}
// Read settings from registry for PAL settings.
void {{ClassName}}::ReadSettings()
{
{% for setting in Settings %}
{% if setting.Structure %}

{% for subs in setting.Structure %}
{{ prep_cond_begin(subs.BuildTypes, subs.OrBuildTypes) }}

{% set var_name = "m_settings." + setting.VariableName + "." + subs.VariableName %}
{% if subs.IsOptional %}
    {
        decltype({{var_name}})::ValueType valueRead{};
        if (ReadSetting(
            {%+ if subs.Scope == "PublicCatalystKey" %}"{{setting.Name}}.{{subs.Name}}"{% else %}p{{setting.Name}}_{{subs.VariableName}}HashStr{% endif %},
            {{ subs.Type|setting_type_cpp2 }},
            &valueRead{% if IsPalSettings %}, InternalSettingScope::{{setting.Scope|default('PrivatePalKey')}}{% endif %}{% if subs.StringLength %}, {{subs.StringLength}}{% endif %}))
        {
            {{var_name}} = valueRead;
        }
    }
{% else %}
    ReadSetting(
        {%+ if subs.Scope == "PublicCatalystKey" %}"{{setting.Name}}.{{subs.Name}}"{% else %}p{{setting.Name}}_{{subs.VariableName}}HashStr{% endif %},
        {{ subs.Type|setting_type_cpp2 }},
        &{{var_name}}{% if IsPalSettings %}, InternalSettingScope::{{setting.Scope|default('PrivatePalKey')}}{% endif %}{% if subs.StringLength %}, {{subs.StringLength}}{% endif %});
{% endif %}
{{ prep_cond_end(subs.BuildTypes, subs.OrBuildTypes) -}}
{% endfor %}
{% else %}
{{ prep_cond_begin(setting.BuildTypes, setting.OrBuildTypes) }}
{% set var_name = "m_settings." + setting.VariableName %}
{% if setting.IsOptional %}
    {
        decltype({{var_name}})::ValueType valueRead{};
        if (ReadSetting(
            {%+ if setting.Scope == "PublicCatalystKey" %}"{{setting.Name}}"{% else %}p{{setting.Name}}HashStr{% endif %},
            {{ setting.Type|setting_type_cpp2 }},
            &valueRead{% if IsPalSettings %}, InternalSettingScope::{{setting.Scope|default('PrivatePalKey')}}{% endif %}{% if setting.StringLength %}, {{setting.StringLength}}{% endif %}))
        {
            {{var_name}} = valueRead;
        }
    }
{% else %}
    ReadSetting(
        {%+ if setting.Scope == "PublicCatalystKey" %}"{{setting.Name}}"{% else %}p{{setting.Name}}HashStr{% endif %},
        {{ setting.Type|setting_type_cpp2 }},
        &{{var_name}}{% if IsPalSettings %}, InternalSettingScope::{{setting.Scope|default('PrivatePalKey')}}{% endif %}{% if setting.StringLength %}, {{setting.StringLength}}{% endif %});
{% endif %}
{{ prep_cond_end(setting.BuildTypes, setting.OrBuildTypes) -}}
{% endif %}
{% endfor %}
}
{% endif %}

{% if ComponentName == "Dxc" %}
void {{ClassName}}::LogSettings(
    const char* pLabel)
{
#if DXC_DEVELOPER
    if (m_settings.enableGlobalSettingsDumping == true)
    {
        static bool firstCall = true;
        const Util::FileAccessMode access =
            firstCall ? Util::FileAccessMode::FileAccessWrite : Util::FileAccessMode::FileAccessAppend;
        firstCall = false;

        Util::File file;
        Util::Result result = file.Open(m_settings.globalSettingsDumpFile, access);
        if (result == Util::Result::Success)
        {
            result = file.Printf("Location:%s\n", pLabel);
            DXC_ASSERT(result == Util::Result::Success);

            {% for setting in Settings %}
            {% set var_name = "m_settings." + setting.VariableName %}
            {% if setting.IsOptional %}
            result = {{var_name}}.HasValue()
                ? file.Printf("{{setting.VariableName}}={{ setting.Type|setting_format_string }}\n", {{var_name}}.Value())
                : file.Printf("{{setting.VariableName}}=unset\n");
            {% else %}
            result = file.Printf("{{setting.VariableName}}={{ setting.Type|setting_format_string }}\n", {{var_name}});
            {% endif %}
            DXC_ASSERT(result == Util::Result::Success);

            {% endfor %}
            file.Close();
        }
    }
#endif
}
{% endif %}

// SettingsBlob implementation

{{ComponentName}}SettingsBlobNode g_{{ComponentNameLower}}SettingsBlobNode;

bool {{ComponentName}}SettingsBlobNode::IsEncoded()
{
    return {{IsEncoded|string|lower}};
}

uint32_t {{ComponentName}}SettingsBlobNode::GetMagicOffset()
{
    return {{MagicOffset}};
}

uint64_t {{ComponentName}}SettingsBlobNode::GetBlobHash()
{
    return static_cast<uint64_t>({{SettingsBlobHash|abs}}ULL);
}

const uint8_t* {{ComponentName}}SettingsBlobNode::GetBlob(uint32_t* pOutSize)
{
    static const uint8_t s_settingsBlob[] = {
        {{SettingsBlob}}
    };

    static_assert({{SettingsBlobSize}} == sizeof(s_settingsBlob),
        "Settings JSON data size in C++ doesn't match the one calculated "
        "in the codegen script."
    );

    *pOutSize = sizeof(s_settingsBlob);

    return s_settingsBlob;
}

{% for namespace in Namespaces %}
} // {{namespace}}
{% endfor %}
