/* Copyright (c) 2022-2023 Advanced Micro Devices, Inc. All rights reserved. */

// ============================================================================
// WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!
//
// This code was auto-generated by settings_codegen.py. Do not modify manually.
// ============================================================================

#pragma once

#include <dd_settings_base.h>
#include <dd_settings_blob.h>
#include <dd_optional.h>
{% for header in IncludeHeaders%}
#include <{{header}}>
{% endfor -%}

{% if ComponentName == "Vulkan" %}
typedef Util::uint64 uint64;
typedef Util::uint32 uint32;
typedef Util::uint8 uint8;
typedef Pal::gpusize gpusize;
{% endif -%}

{% macro prep_cond_begin(build_types, or_build_types) -%}
{% if build_types or or_build_types -%}
{{build_types|buildtypes_to_c_macro(or_build_types)}}
{% endif -%}
{% endmacro -%}

{% macro prep_cond_end(build_types, or_build_types) -%}
{% if build_types or or_build_types -%}
#endif
{% endif -%}
{% endmacro -%}

{% for namespace in Namespaces %}
namespace {{namespace}}
{
{% endfor %}

/// Enums /////////////////////////////////////////////////////////////////////
{% for enum in Enums -%}
{% if not enum.SkipGen -%}
{{ prep_cond_begin(enum.BuildTypes, enum.OrBuildTypes) -}}
enum {{enum.Name}} : {% if enum.Is64Bit %} uint64_t {% else %} uint32_t {% endif %}
{
{% for value in enum.Values -%}
{{ prep_cond_begin(value.BuildTypes, value.OrBuildTypes) -}}
{{'    '}}{{value.Name}} = {{'0x%X'|format(value.Value)}}, {% if value.Description %}// {{value.Description}}{% endif %}
{{ prep_cond_end(value.BuildTypes, value.OrBuildTypes) -}}
{% endfor -%}
};
{{ prep_cond_end(enum.BuildTypes, enum.OrBuildTypes) }}
{% endif -%}
{% endfor -%}

struct {{SettingsStructName}}
{
{% for setting in Settings -%}
{% if setting.Structure -%}
{% if setting.Description %}    // {{setting.Description | wordwrap(100) | replace('\n', '\n    // ')}}{% endif %}
    struct {
{% for subs in setting.Structure -%}
{{ prep_cond_begin(subs.BuildTypes, subs.OrBuildTypes) }}
        {% if subs.Description %}// {{subs.Description | wordwrap(100) | replace('\n', '\n        // ')}}{% endif %}
        {{subs.VariableType}} {{subs.VariableName}}{% if subs.StringLength %}[{{subs.StringLength}}]{% endif %};
{{ prep_cond_end(subs.BuildTypes, subs.OrBuildTypes) -}}
{% endfor %}
    } {{setting.VariableName}};

{% else -%}
{{ prep_cond_begin(setting.BuildTypes, setting.OrBuildTypes) -}}
{% if setting.Description %}    // {{setting.Description | wordwrap(100) | replace('\n', '\n    // ')}}{% endif %}
    {{setting.VariableType}} {{setting.VariableName}}{% if setting.StringLength %}[{{setting.StringLength}}]{% endif %};
{{ prep_cond_end(setting.BuildTypes, setting.OrBuildTypes) -}}
{% endif %}
{% endfor %}
};

const uint32_t g_{{ComponentNameLower}}NumSettings = {{NumSettings}};

{% for setting in Settings -%}
{% if setting.Structure -%}
{% for subs in setting.Structure -%}
{{ prep_cond_begin(subs.BuildTypes, subs.OrBuildTypes) -}}
constexpr DD_SETTINGS_NAME_HASH {{setting.VariableName}}_{{subs.VariableName}}Hash = {{subs.NameHash}};
constexpr const char* p{{setting.Name}}_{{subs.VariableName}}HashStr = "#{{subs.NameHash}}";
{{ prep_cond_end(subs.BuildTypes, subs.OrBuildTypes) -}}
{% endfor -%}
{% else -%}
{{ prep_cond_begin(setting.BuildTypes, setting.OrBuildTypes) -}}
constexpr DD_SETTINGS_NAME_HASH {{setting.VariableName}}Hash = {{setting.NameHash}};
constexpr const char* p{{setting.Name}}HashStr = "#{{setting.NameHash}}";
{{ prep_cond_end(setting.BuildTypes, setting.OrBuildTypes) -}}
{% endif -%}
{% endfor -%}

// =======================================================================================
// SettingsBlob

class {{ComponentName}}SettingsBlobNode : public DevDriver::SettingsBlobNode
{
public:
    const uint8_t* GetBlob(uint32_t* pOutSize) override;
    bool IsEncoded() override;
    uint32_t GetMagicOffset() override;
    uint64_t GetBlobHash() override;
};

{% for namespace in Namespaces %}
} // {{namespace}}
{% endfor %}
