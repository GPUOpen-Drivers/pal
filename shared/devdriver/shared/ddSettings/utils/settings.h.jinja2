/* Copyright (c) 2022-2023 Advanced Micro Devices, Inc. All rights reserved. */

// ============================================================================
// WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!
//
// This code was auto-generated by settings_codegen.py. Do not modify manually.
// ============================================================================

#pragma once

#include <ddSettingsBase.h>
#include <ddSettingsBlob.h>

{% macro prep_cond_begin(prep_cond) %}
{% if prep_cond %}
{{prep_cond|buildtypes_to_c_macro}}
{% endif %}
{% endmacro %}

{% macro prep_cond_end(prep_cond) %}
{% if prep_cond %}
#endif

{% endif %}
{% endmacro %}

namespace {{namespace}}
{
/// Enums /////////////////////////////////////////////////////////////////////
{% for enum in enums %}
enum {{enum.name}} : uint32_t
{
{% for value in enum["values"] %}
{{ prep_cond_begin(value.buildtypes) -}}
{{'    '}}{{value.name}} = {{value.value}}, {% if value.description %}// {{value.description}}{% endif +%}
{{ prep_cond_end(value.buildtypes) -}}
{% endfor %}
};

{% endfor %}

struct {{component}}Settings : public DevDriver::SettingsData
{
{% for setting in settings %}
{% if setting.groupName %}

    struct {
{% for subs in setting.subsettings %}
{{ prep_cond_begin(subs.buildtypes) -}}
{{'        '}}{{subs.variableType}} {{subs.variableName}}{% if subs.stringLength %}[{{subs.stringLength}}]{% endif %};
{{ prep_cond_end(subs.buildtypes) -}}
{% endfor %}
    } {{setting.groupVariableName}};
{% else %}
{{ prep_cond_begin(setting.buildtypes) -}}
{{'    '}}{{setting.variableType}} {{setting.variableName}}{% if setting.stringLength %}[{{setting.stringLength}}]{% endif %};
{{ prep_cond_end(setting.buildtypes) -}}
{% endif %}
{% endfor %}
};

const uint32_t g_{{componentNameLower}}NumSettings = {{numSettings}};

{% for setting in settings %}
{% if setting.groupName %}
{% for subs in setting.subsettings %}
{{ prep_cond_begin(subs.buildtypes) -}}
constexpr const char* p{{setting.groupName}}_{{subs.name}}HashStr = "#{{subs.nameHash}}";
{{ prep_cond_end(subs.buildtypes) -}}
{% endfor %}
{% else %}
{{ prep_cond_begin(setting.buildtypes) -}}
constexpr const char* p{{setting.name}}HashStr = "#{{setting.nameHash}}";
{{ prep_cond_end(setting.buildtypes) -}}
{% endif %}
{% endfor %}

// =======================================================================================
// SettingsBlob

class {{component}}SettingsBlobNode : public DevDriver::SettingsBlobNode
{
public:
    const uint8_t* GetBlob(uint32_t* pOutSize) override;
    bool IsEncoded() override;
    uint64_t GetBlobHash() override;
};

} // namespace {{Namespace}}
