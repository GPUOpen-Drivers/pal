/* Copyright (c) 2022 Advanced Micro Devices, Inc. All rights reserved. */

// =============================================================================
// WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!  WARNING!
//
// This code was auto-generated by settings_codegen.py. Do not modify manually.
// =============================================================================

#include "{{CodeGenHeader}}"
#include <{{SettingsHeader}}>

#include <ddSettingsBlob.h>
#include <devDriverServer.h>
#include <protocols/ddSettingsService.h>
{% if UseRpc %}
#include <ddSettingsService.h>
{% endif %}
#include <ddSettingsTypes.h>

using namespace DevDriver::SettingsURIService;

{% macro prep_cond_begin(prep_cond) %}
{% if prep_cond %}
{{prep_cond}}
{% endif %}
{% endmacro %}
{# ======================================== #}
{% macro prep_cond_end(prep_cond) %}
{% if prep_cond %}
#endif
{% endif %}
{% endmacro %}

namespace {{ComponentName}}
{

// =============================================================================
// Initializes the settings structure to default values.
void {{ComponentName}}Settings::SetupDefaults()
{
{% for setting in Settings %}
{% if setting.GroupName %}

{% for subs in setting.Subsettings %}
{{ prep_cond_begin(subs.BuildFilters) -}}
{{ subs|setup_default(setting.GroupVariableName) -}}
{{ prep_cond_end(subs.BuildFilters) -}}
{% endfor %}
{% else %}
{{ prep_cond_begin(setting.BuildFilters) -}}
{{ setting|setup_default('') -}}
{{ prep_cond_end(setting.BuildFilters) -}}
{% endif %}
{% endfor %}
}

// =============================================================================
const char* GetComponentName()
{
    return "{{ComponentName}}";
}

// =============================================================================
// Initializes the SettingInfo hash map and array of setting hashes.
void {{ComponentName}}Settings::InitSettingsInfo()
{
    DevDriver::SettingsValueRef valueRef = {};
{% for setting in Settings %}
{% if setting.GroupName %}

{% for subs in setting.Subsettings %}
{{ prep_cond_begin(subs.BuildFilters) }}
    valueRef.type = {{ subs.Defaults.Type|setting_type_cpp2 }};
    valueRef.pValue = &m_settings.{{setting.GroupVariableName}}.{{subs.VariableName}};
    valueRef.size = sizeof(m_settings.{{setting.GroupVariableName}}.{{subs.VariableName}});
    m_settingValueRefsMap.Insert({{subs.NameHash}}, valueRef);
{{ prep_cond_end(subs.BuildFilters) -}}
{% endfor %}
{% else %}
{{ prep_cond_begin(setting.BuildFilters) }}
    valueRef.type = {{ setting.Defaults.Type|setting_type_cpp2 }};
    valueRef.pValue = &m_settings.{{setting.VariableName}};
    valueRef.size = sizeof(m_settings.{{setting.VariableName}});
    m_settingValueRefsMap.Insert({{setting.NameHash}}, valueRef);
{{ prep_cond_end(setting.BuildFilters) -}}
{% endif %}
{% endfor %}
}

// =============================================================================
// SettingsBlob implementation

class {{ComponentName}}SettingsBlobNode : public DevDriver::SettingsBlobNode
{
public:
    const uint8_t* GetBlob(uint32_t* pOutSize) override
    {
        static const uint8_t s_settingsBlob[] = {
            {{SettingsBlob}}
        };

        static_assert({{SettingsBlobSize}} == sizeof(s_settingsBlob),
            "Settings YAML data size in C++ doesn't match the one calculated "
            "in the codegen script."
        );

        *pOutSize = sizeof(s_settingsBlob);

        return s_settingsBlob;
    }

    uint64_t GetBlobHash() override
    {
        return (uint64_t){{SettingsBlobHash}};
    }
};

{{ComponentName}}SettingsBlobNode g_{{ComponentNameLower}}SettingsBlobNode;

} // namespace {{ComponentName}}
